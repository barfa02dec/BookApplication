package com.app.service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import javax.transaction.Transactional;
import com.app.exception.BookException;
import com.app.model.BookInventory;
import com.app.model.BookingDetails;
import com.app.model.OrderDetails;
import com.app.model.User;
import com.app.repository.BookInventoryRepository;
import com.app.repository.BookingDetailsRepository;
import com.app.repository.OrderDetailsRepository;

@Service
public class OrderServiceImp implements OrderServiceInf{

	@Autowired
	UserServiceInf user_service;
	@Autowired
	BookInventoryInf book_inventory_service;
	@Autowired
	OrderDetailsRepository order_repo;
	@Autowired
	BookingDetailsRepository booking_repo;
	@Autowired
	BookInventoryRepository book_inven_repo;
	@Override
	
	/**
	 * Input user_id as path variable and list of booking details that takes quantity and book inventory id
	 * Check user is valid
	 * find stocks for each book inventory and decrement stock by quantity and update it
	 * get price for each book inventory and add in total amount with quantity
	 * Create object of order table and store it and get order id
	 * store each book inventory id in booking details table
	 * return total amount of order 
	 * @throws BookException
	 * Roll back on book exception
	 */
	@Transactional(rollbackOn = BookException.class)
	public double placeOrder(int user_id, List<BookingDetails> booking_details) throws BookException{
		try {
			//check user is valid
			User user = user_service.getUserById(user_id);
			double total_amount = 0;
			//loop for checking stocks and decrement and update stock in book inventory table
			for(BookingDetails be : booking_details) {	
				BookInventory book_inventory = book_inventory_service.getBookInventoryById(be.getBookInventoryId().getBookInventoryId());
				if(book_inventory.getStock()>=be.getQuantity()) {
					book_inventory.setStock(book_inventory.getStock()-be.getQuantity());
					book_inventory_service.updateBookInventory(book_inventory);
				}else
					throw new BookException(HttpStatus.UNPROCESSABLE_ENTITY, "Out of Stock");
				total_amount += book_inventory.getBook_id().getPrice() * be.getQuantity(); 
			}
			//create and store order object and get order id 
			OrderDetails order = order_repo.save(new OrderDetails(user,total_amount,LocalDate.now()));
			//loop for store each product detail in booking_details table
			for(BookingDetails bd : booking_details) {
				bd.setBookInventoryId(book_inventory_service.getBookInventoryById(bd.getBookInventoryId().getBookInventoryId()));
				bd.setOrderId(order);
				bd.setDeliveryDate(LocalDate.now().plusDays(bd.getBookInventoryId().getDeliveryInDays()));
				booking_repo.save(bd);
			}	
//			if(true)
//				throw new BookException(HttpStatus.OK, "Is Roll Back Working");
			return total_amount;
		}catch(BookException e) {
			throw e;
		}
	}
	/**
	 * input order id
	 * return Order details
	 * @throw BookException
	 */
	@Override
	public OrderDetails findOrder(int order_id) throws BookException{
		return order_repo.findById(order_id).orElseThrow(()-> new BookException(HttpStatus.NOT_FOUND,"Order not found for order id "+order_id));
	}
	/**
	 * input order id
	 * return product details for order id
	 * @throws BookException
	 */
	@Override
	public List<BookingDetails> getAllProductOfAnOrder(int order_id) throws BookException {
		return booking_repo.getAllProductsOfAnOrder(this.findOrder(order_id));
	}
	
	/**
	 * input user id
	 * get list of orders where user id = user id
	 * for each order id get list of products from booking table and add into list
	 * return list of list of products
	 * @throws BookException
	 */
	@Override
	public List<List<BookingDetails>> getAllProductOfAnUser(int user_id) throws BookException {
			List<OrderDetails> orders = order_repo.getAllOrdersOfAnUser(user_service.getUserById(user_id));
			if(orders.isEmpty())
				throw new BookException(HttpStatus.NOT_FOUND,"No order placed for user id "+user_id);
			List<List<BookingDetails>> products = new ArrayList<>();
		for(OrderDetails o : orders) 
			products.add(this.getAllProductOfAnOrder(o.getOrder_id()));
		return products;
	}
	
	/**
	 * Input order_id
	 * get all products of order
	 * get quantity of product and update stock in book inventory table
	 * remove the products from booking details table
	 * remove order from order details table
	 * return 
	 * @throws BookException
	 */
	@Transactional(rollbackOn = BookException.class)
	@Override
	public void removeOrder(int order_id) throws BookException {
		List<BookingDetails> products = booking_repo.getAllProductsOfAnOrder(this.findOrder(order_id));
		for(BookingDetails product : products) {
			int quantity = product.getQuantity();
			BookInventory bi = product.getBookInventoryId();
			bi.setStock(bi.getStock()+quantity);
			book_inven_repo.save(bi);
		}
//		if(true)
//			throw new BookException(HttpStatus.ACCEPTED, "Check Roll back");
		for(BookingDetails product : products)
			booking_repo.removeBookingDetails(product.getBookingId());
		order_repo.removeOrder(order_id);
	}
	
	/**
	 * input user id
	 * get all order of user and remove all orders
	 * return 
	 * @throws BookException
	 */
	@Override
	@Transactional(rollbackOn = BookException.class)
	public void removeAllOrderOfAnUser(int user_id) throws BookException {
		User user = user_service.getUserById(user_id);
		List<OrderDetails> orders = order_repo.getAllOrdersOfAnUser(user);
		if(orders.isEmpty())
			throw new BookException(HttpStatus.NOT_FOUND,"No order placed for user id "+user_id);
		for(OrderDetails order : orders)
			this.removeOrder(order.getOrder_id());
	}
		
}
